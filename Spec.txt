    Spec:= ScrapLogger  
    Args:= 
        -Mode := <watch|log> 
        
        -logType:= <Apache|General|App_Def> 
                
                if Apache is set, then employ the Common Log Format 
                if App_Def is swtiched, then specify the Applications Log Message Format as specified by a file 
                 in a .properties / yaml file (the path of which should be specified in at the commandline, 

                General looks like the following:= 
                DEBUG
                INFO
                WARN
                ERROR
        
        -logFormat:=  
            The default is a simple logfile (BASIC:), which is just <DATE>, <CHANGETYPE>, <PATH> 
            Other formats can be:= <JSON|WINSTON|formatRules|XML|HTML|ProtoBuf|Basic>  
                if formatID is specified, it can be read from a .properties / yaml file (identical condition is above). 
    
        -logFileSystem:= specifies the filesystem in which to store logfiles. the default is ~/Logs. 
            #TODO: add support for Log output to socket, pipe, RPC, database, REST and SOAP 
        
        -logFile Specifies the log file to use. if there is no log file specified, it will resort to log-<DATE>.log 
            #TODO: add file extension detection logic 

        -git <yes|no> := Specifies wheter to use git when saving and tracking logs. the Default is <YES>, but it can be turned off. 
        
        -msg <[STRING]> := Specifes the default message for commit. However, there may be times when you need several default messages. 
        
        -mesgFile <[FILE]> := Specifies the file to source for automated git messaging. Depending on the coniditon, Scrapper will select the message, based on the log changetype/tag 
            it will look for the message file in pwd, unless otherwise specified. 

        -gitConfig <[STRING]|[FILE]> := Specifies either the YML/Prop file to use for build a git configuration file, 
            or will simply write the String to the git config file. 
                multiple configs can happen 
                Best Practice: store all configs in a repo

        -config <[FILE]> := Specifies the config file to source from. This way, the options can be changed out as needed 
            BEST PRACTICE: STORE THE GODDAMN CONFIG FILES IN ITS OWN REPO!!! 

        -logEngine <1|2> := Specifies the logging backend to use. 
            While the logging backend here (the baked-in) works,
            there maybe a time when you need a more robust one. 
            
                tags: 
                    1 := default (internal) 
                    2 := log4net 
        
        -framework <default|psframework> := specifies 
            whether to use psframework or not. 
            default is NO 
        
        -nugetEngine: <default|on> := specifies the NuGet packaing framework  
            Not sure why I need this... but oh well :) 

